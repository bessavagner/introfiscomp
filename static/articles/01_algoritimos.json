{
    "articles": [
        {
            "title": "Algorítmos",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Algorítimos consistem em conjuntos de etapas lógicas e ordenadas, as quais, quando seguidas, levam à resolução do problema em questão. A utilidade dos algorítmos abrange uma ampla gama de problemas, desde os mais simples, como o cálculo da área de um círculo, até os mais complexos, como a previsão do tempo ou o projeto de uma aeronave. Vamos explorar esses conceitos com alguns exemplos em pseudocódigo."
                        }
                    ]
                },
                {
                    "title": "Propriedades dos Algorítmos",
                    "content": [
                        {
                            "p": "Existem algumas propriedades importantes que os algorítmos devem. idealmente, possuir:"
                        },
                        {
                            "ul": [
                                "<strong>Precisão:</strong> Os algorítmos devem fornecer resultados precisos e corretos.",
                                "<strong>Eficiência:</strong> Os algorítmos devem ser eficientes em termos de tempo e espaço de execução.",
                                "<strong>Generalização:</strong> Os algorítmos devem ser capazes de resolver uma ampla gama de problemas semelhantes.",
                                "<strong>Simplicidade:</strong> Os algorítmos devem ser fáceis de entender e implementar."
                            ]
                        }
                    ]
                },
                {
                    "title": "Tipos de Algorítmos",
                    "content": [
                        {
                            "p": "Existem muitos tipos diferentes de algorítmos, cada um com suas próprias características e aplicações. Alguns dos tipos de algorítmos mais comuns incluem:"
                        },
                        {
                            "ul": [
                                "<strong>Algorítmos de ordenação:</strong> Esses algorítmos são usados para organizar dados em uma ordem específica, como ordem alfabética ou numérica.",
                                "<strong>Algorítmos de busca:</strong> Esses algorítmos são usados para encontrar um item específico em um conjunto de dados.",
                                "<strong>Algorítmos de otimização:</strong> Esses algorítmos são usados para encontrar a melhor solução para um problema específico, como o caminho mais curto entre duas cidades ou a alocação mais eficiente de recursos.",
                                "<strong>Algorítmos de inteligência artificial:</strong> Esses algorítmos são usados para construir sistemas que podem aprender e se adaptar ao seu ambiente, como sistemas de reconhecimento de imagem e sistemas de tradução automática."
                            ]
                        }
                    ]
                },
                {
                    "title": "Aplicações dos Algorítmos",
                    "content": [
                        {
                            "p": "Os algorítmos são usados em uma ampla variedade de aplicações, incluindo:"
                        },
                        {
                            "ul": [
                                "<strong>Ciência da computação:</strong> Os algorítmos são usados para resolver problemas computacionais, como a ordenação de dados, a busca de informações e a otimização de recursos.",
                                "<strong>Engenharia de software:</strong> Os algorítmos são usados para projetar e implementar sistemas de software eficientes e confiáveis.",
                                "<strong>Inteligência artificial:</strong> Os algorítmos são usados para construir sistemas que podem aprender e se adaptar ao seu ambiente, como sistemas de reconhecimento de imagem e sistemas de tradução automática.",
                                "<strong>Computação gráfica:</strong> Os algorítmos são usados para gerar imagens e animações realistas.",
                                "<strong>Bioinformática:</strong> Os algorítmos são usados para analisar dados biológicos, como sequências de DNA e proteínas.",
                                "<strong>Física:</strong> Há diversas finalidades na aplicações de algorítimos para soluções de problemas físicos e pesquisa em todas as áreas da física. A seguir, alguns exemplos."
                            ]
                        }
                    ]
                },
                {
                    "title": "Os algorítmos na física:",
                    "content": [
                        {
                            "ul": [
                                "<strong>Resolver equações diferenciais</strong> Os algorítmos numéricos são usados para resolver equações diferenciais que descrevem o movimento de objetos físicos. Por exemplo, os algorítmos de <a href=\"https://pt.wikipedia.org/wiki/M%C3%A9todo<em>de</em>Runge-Kutta\">Runge-Kutta</a> são usados para resolver as equações de movimento de um projétil.",
                                "<strong>Simular sistemas físicos</strong> Os algorítmos de simulação são usados para simular o comportamento de sistemas físicos. Por exemplo, os algorítmos de Monte Carlo são usados para simular o movimento de partículas em um gás.",
                                "<strong>Analisar dados</strong> Os algorítmos de análise de dados são usados para analisar dados experimentais e teóricos. Por exemplo, os algorítmos de regressão linear são usados para encontrar relações lineares entre variáveis.",
                                "<strong>Projetar experimentos</strong> Os algorítmos de otimização são usados para projetar experimentos que sejam eficientes e informativos. Por exemplo, os algorítmos de programação linear são usados para projetar experimentos que minimizem o número de experiências necessárias para atingir um determinado objetivo."
                            ]
                        },
                        {
                            "p": "Aqui estão alguns exemplos específicos de como os algorítmos são usados para resolver problemas em física:"
                        },
                        {
                            "ul": [
                                "<strong>O algoritmo de Runge-Kutta</strong> Este algoritmo é usado para resolver equações diferenciais que descrevem o movimento de objetos físicos. O algoritmo é baseado na ideia de que a derivada de uma função pode ser aproximada pela diferença finita entre dois valores da função. O algoritmo de Runge-Kutta é um método de quarta ordem, o que significa que o erro da aproximação é proporcional à quinta potência do tamanho do passo.",
                                "<strong>O algoritmo de Monte Carlo</strong> Este algoritmo é usado para simular o movimento de partículas em um gás. O algoritmo é baseado na ideia de que o movimento das partículas é aleatório. O algoritmo de Monte Carlo é um método estocástico, o que significa que o resultado da simulação é diferente a cada vez que o algoritmo é executado usando <a href=\"https://pt.wikipedia.org/wiki/Semente_aleat%C3%B3ria\">sementes</a> novas.",
                                "<strong>O algoritmo de regressão linear</strong> Este algoritmo é usado para encontrar relações lineares entre variáveis. O algoritmo é baseado na ideia de que a relação entre variaveis pode aproximadamente ser representada por uma reta. O algoritmo de regressão linear calcula a reta que melhor se ajusta aos dados."
                            ]
                        },
                        {
                            "p": "Os algorítmos são uma ferramenta essencial para os físicos. Eles permitem aos físicos resolver problemas complexos, simular sistemas físicos e analisar dados experimentais e teóricos."
                        }
                    ]
                },
                {
                    "title": "Linguagens de programação",
                    "content": [
                        {
                            "p": "Os algorítmos são implementados em linguagens de programação. Uma linguagem de programação é um sistema formal de notação usado para descrever o comportamento de um computador. Existem muitas linguagens de programação diferentes, cada uma com suas próprias características e aplicações. Algumas das linguagens de programação mais comuns incluem:"
                        },
                        {
                            "ul": [
                                "<strong>Python:</strong> Python é uma linguagem de programação de alto nível, interpretada e de propósito geral. Python é fácil de aprender e usar, o que a torna uma ótima escolha para iniciantes.",
                                "<strong>Java:</strong> Java é uma linguagem de programação orientada a objetos, de alto nível e de propósito geral. Java é uma linguagem muito popular e é usada para desenvolver uma ampla variedade de aplicações, desde aplicativos móveis até sistemas empresariais.",
                                "<strong>C++:</strong> C++ é uma linguagem de programação orientada a objetos, de baixo nível e de propósito geral. C++ é uma linguagem poderosa e eficiente, mas também é mais complexa de aprender e usar do que outras linguagens.",
                                "<strong>C:</strong> C é uma linguagem de programação de baixo nível, de propósito geral. C é uma linguagem muito eficiente, mas também é muito difícil de aprender e usar.",
                                "<strong>JavaScript:</strong> JavaScript é uma linguagem de programação de alto nível, interpretada e de propósito geral. JavaScript é usada para desenvolver aplicativos da web e é uma das linguagens de programação mais populares do mundo."
                            ]
                        },
                        {
                            "p": "A escolha da linguagem de programação certa para um determinado projeto depende de uma série de fatores, incluindo o tipo de aplicação que está sendo desenvolvida, o nível de experiência do desenvolvedor e o desempenho necessário."
                        }
                    ]
                },
                {
                    "title": "Pseudocódigo",
                    "content": [
                        {
                            "p": "O pseudocódigo é um notação usada para descrever a lógica de um algoritmo de maneira independente de qualquer linguagem de programação específica. O pseudocódigo é usado para criar uma representação de alto nível do algoritmo, facilitando sua compreensão e análise, de forma que as regras de sintaxes e semânticas são soltas. A finalidade do pseudocódigo é apenas para a leitura humana, servindo de representação geral de um algorítimo."
                        },
                        {
                            "p": "Aqui estão alguns exemplos de pseudocódigo:"
                        }
                    ]
                },
                {
                    "title": "Algoritmo para encontrar o maior número em uma lista de números previamente definida:",
                    "content": [
                        {
                            "mockupCodes": [
                                "// suponha 'lista' já definida",
                                "maior_numero = 0",
                                "PARA CADA número NA lista:",
                                "    SE número > maior_numero:",
                                "        maior_numero = número",
                                "FIM PARA",
                                "escreva(maior_numero)"
                            ]
                        }
                    ]
                },
                {
                    "title": "Exemplo: Cálculo da Área de um Círculo",
                    "content": [
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para calcular a área de um círculo",
                                "Programa area_circulo",
                                "Função calcularAreaCirculo(raio):",
                                "    pi = 3.14159",
                                "    área = pi * raio * raio",
                                "    Retornar área",
                                "Fim Função",
                                "// Uso da função",
                                "Início",
                                "    raioDoCirculo = 5",
                                "    áreaCalculada = calcularAreaCirculo(raioDoCirculo)",
                                "    escreva(\"A área do círculo é: \" + áreaCalculada)",
                                "Fim"
                            ]
                        },
                        {
                            "p": "Este algoritmo calcula a área de um círculo usando a fórmula <code>área = π * raio²</code>. O algoritmo recebe o raio do círculo como parâmetro e retorna a área calculada."
                        }
                    ]
                },
                {
                    "title": "Exemplo : Algoritmo de Ordenação - Bubble Sort",
                    "content": [
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para o algoritmo de ordenação Bubble Sort",
                                "Programa bubble_sort",
                                "Função bubbleSort(arr):",
                                "    tamanho = Comprimento(arr)",
                                "    Para i = 0 até tamanho - 1:",
                                "        Para j = 0 até tamanho - i - 1:",
                                "            Se arr[j] > arr[j + 1]:",
                                "                temp = arr[j]",
                                "                arr[j] = arr[j + 1]",
                                "                arr[j + 1] = temp",
                                "        Fim Para",
                                "    Fim Para",
                                "Fim Função",
                                "// Uso do algoritmo",
                                "Início",
                                "    lista = [64, 34, 25, 12, 22, 11, 90]",
                                "    bubbleSort(lista)",
                                "    escreva(\"Lista ordenada: \" + lista)",
                                "Fim"
                            ]
                        },
                        {
                            "p": "Este algoritmo ordena uma lista de números usando o algoritmo <a href=\"https://pt.wikipedia.org/wiki/Bubble_sort\">Bubble Sort</a>. O algoritmo compara cada elemento da lista com o elemento seguinte e, se o elemento atual for maior que o elemento seguinte, os dois elementos são trocados. O algoritmo repete esse processo até que a lista esteja ordenada."
                        },
                        {
                            "p": "O pseudocódigo pode ser usado para representar qualquer tipo de algoritmo. É uma ferramenta valiosa para o desenvolvimento de software, pois permite que os desenvolvedores se concentrem na lógica do algoritmo sem se preocupar com a implementação em uma linguagem de programação específica."
                        },
                        {
                            "p": "Nas seções seguintes vamos definir algumas regras de sintaxe para uso próprio nesta disciplina, mas segue aqui um resumo:"
                        }
                    ]
                },
                {
                    "title": "Regras de sintaxe de pseudocódigo",
                    "content": [
                        {
                            "ul": [
                                "As instruções são escritas em linhas separadas.",
                                "As instruções são identadas para indicar o escopo.",
                                "As variáveis são declaradas antes de serem usadas.",
                                "Os operadores aritméticos são +, -, *, /, // (divisão inteira) e % (resto da divisão).",
                                "Os operadores relacionais são ==, != (diferente), <, >, <= e >=.",
                                "Os operadores lógicos são && (ou E), || (ou OU) e ! (ou NÂO).",
                                "Os comandos de controle de fluxo incluem SE, SENÃO, PARA, ENQUANTO",
                                "Os comentários são escritos entre /* */ ou //."
                            ]
                        }
                    ]
                },
                {
                    "title": "Conclusão",
                    "content": []
                }
            ],
            "lead": "Um <a href=\"https://pt.wikipedia.org/wiki/Algoritmo\">algoritmo</a> é um conjunto de instruções bem definidas que descrevem passo a passo a solução de um problema."
        },
        {
            "title": "Atribuições",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "Conceitos Básicos",
                    "content": [
                        {
                            "p": "Uma atribuição é composta por um <strong>nome de variável</strong>, o sinal de igual <strong>(=)</strong> e o <strong>valor</strong> que será armazenado na variável."
                        },
                        {
                            "mockupCode": "x = 10"
                        },
                        {
                            "p": "Já o <strong>nome da variável</strong> é um identificador único que representa um local na memória do computador onde o valor será armazenado."
                        },
                        {
                            "p": "O <strong>valor</strong> é qualquer constante ou expressão que possa ser avaliada em um valor."
                        },
                        {
                            "mockupCodes": [
                                "nome = \"João\"",
                                "idade = 25.5"
                            ]
                        },
                        {
                            "p": "No exemplo acima, a variável <strong>nome</strong> armazenará o valor <code>\"João\"</code>, enquanto a variável <strong>idade</strong> armazenará o valor <code>25.5</code>."
                        }
                    ]
                },
                {
                    "title": "Atribuição com Expressões",
                    "content": [
                        {
                            "p": "Também podemos atribuir valores a variáveis a partir de expressões. Uma expressão é uma combinação de valores, variáveis e operadores que resulta em um único valor."
                        },
                        {
                            "mockupCodes": [
                                "// Atribuição com expressão",
                                "base = 5",
                                "altura = 8",
                                "área = base * altura"
                            ]
                        },
                        {
                            "p": "No exemplo acima, a variável <strong>área</strong> armazenará o valor <code>40</code>, que é o resultado da multiplicação da variável <code>base</code> pela variável <code>altura</code>."
                        },
                        {
                            "subsection": "Atribuição Condicional"
                        },
                        {
                            "p": "A atribuição condicional é uma forma de atribuir um valor a uma variável com base em uma condição. A condição é uma expressão booleana que pode ser avaliada como <code>verdadeiro</code> ou <code>falso</code>."
                        },
                        {
                            "mockupCodes": [
                                "// Atribuição condicional",
                                "temperatura = 30",
                                "estado = Se temperatura > 25 então \"Quente\" senão \"Frio\""
                            ]
                        },
                        {
                            "p": "No exemplo acima, a variável <strong>estado</strong> será atribuída ao valor <code>\"Quente\"</code> se a variável <strong>temperatura</strong> for maior que <code>25</code>, caso contrário, será atribuída ao valor <code>\"Frio\"</code>."
                        }
                    ]
                },
                {
                    "title": "Conclusão",
                    "content": []
                }
            ],
            "lead": "As atribuições são fundamentais em programação, sendo usadas para armazenar dados em variáveis."
        },
        {
            "title": "Expressões Aritméticas",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Elas são compostas por operandos e operadores, onde os operandos são os números ou variáveis envolvidos na operação, e os operadores são os símbolos que indicam a operação a ser realizada."
                        }
                    ]
                },
                {
                    "title": "Exemplos de Expressões Aritméticas",
                    "content": [
                        {
                            "mockupCodes": [
                                "// Adição",
                                "x = 10 + 20; // x = 30",
                                "// Subtração",
                                "y = 15 - 5; // y = 10",
                                "// Multiplicação",
                                "z = 3 * 4; // z = 12",
                                "// Divisão",
                                "w = 20 / 5; // w = 4",
                                "// Resto da divisão",
                                "r = 17 % 5; // r = 2",
                                "// Potenciação",
                                "p = 2 ** 3; // p = 8"
                            ]
                        }
                    ]
                },
                {
                    "title": "Ordem de Precedência",
                    "content": [
                        {
                            "p": "Quando uma expressão aritmética contém operações com precedência diferente, a ordem na qual elas são realizadas é definida pela regra de precedência. A ordem de precedência padrão é a seguinte:"
                        },
                        {
                            "ol": [
                                "<strong>Parênteses</strong> Os parênteses têm a maior precedência, o que significa que as operações dentro dos parênteses são sempre realizadas primeiro.",
                                "<strong>Potenciação</strong> A potenciação tem a segunda maior precedência, depois dos parênteses.",
                                "<strong>Multiplicação e Divisão</strong> A multiplicação e a divisão têm a mesma precedência e são realizadas da esquerda para a direita.",
                                "<strong>Adição e Subtração</strong> A adição e a subtração têm a menor precedência e são realizadas da esquerda para a direita."
                            ]
                        }
                    ]
                },
                {
                    "title": "Operações Especiais",
                    "content": [
                        {
                            "p": "Existem algumas operações aritméticas especiais que são usadas com frequência na programação:"
                        },
                        {
                            "ul": [
                                "<strong>Resto da Divisão (Módulo)</strong> O operador de resto da divisão, representado por <code>%</code> ou <code>mod</code>, retorna o resto da divisão de dois números. Por exemplo, <code>17 % 5</code> é igual a 2, porque 17 dividido por 5 é igual a 3 com resto 2.",
                                "<strong>Divisão Inteira</strong> O operador de divisão inteira, representado por <code>//</code> ou <code>div</code>, retorna o resultado da divisão de dois números, arredondado para o inteiro mais próximo. Por exemplo, <code>17 // 5</code> é igual a 3, porque 17 dividido por 5 é igual a 3,4, que arredondado para o inteiro mais próximo é 3."
                            ]
                        }
                    ]
                }
            ],
            "lead": "As expressões aritméticas são uma ferramenta fundamental na programação, permitindo realizar cálculos matemáticos e manipular dados numéricos."
        },
        {
            "title": "Variáveis",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "Exemplos de declaração de variáveis",
                    "content": [
                        {
                            "mockupCodes": [
                                "// Declaração e atribuição de uma variável **inteira**",
                                "var idade = 25",
                                "// Declaração e atribuição de uma variável **real**",
                                "var preco = 15.99",
                                "var desconto = 5.0",
                                "var preco_final = preco - desconto",
                                "// Declaração e manipulação de uma variável **texto**",
                                "var nome = \"Maria\"",
                                "var sobrenome = \"Silva\"",
                                "// Qual o valor que será atribuído à variável `nome_completo`?",
                                "var nome_completo = nome + \" \" + sobrenome"
                            ]
                        },
                        {
                            "p": "Nas linguagens de programação chamadas <em>tipadas</em>, como C++, é necessário declarar o tipo de variável. As declarações de variáveis também podem ser indicadas por palavras-chave declaradoras, como <code>var</code>, <code>let</code> e <code>const</code> em Javascript. Há também as linguagens não tipadas, como o Python, na qual as declarações não requerem nem uma palavra-chave declaradora nem a identificação do tipo. E será essa regra que vamos usar na sintaxe de nosso pseudocódigo. Neste caso, os exemplos acima devem ser para nosso pseudocódigo:"
                        },
                        {
                            "mockupCodes": [
                                "idade = 25",
                                "preco = 15.99",
                                "desconto = 5.0",
                                "preco_final = preco - desconto",
                                "nome = \"Maria\"",
                                "sobrenome = \"Silva\"",
                                "nome_completo = nome + \" \" + sobrenome"
                            ]
                        }
                    ]
                },
                {
                    "title": "Regras para nomes das variáveis",
                    "content": [
                        {
                            "p": "Detre outras regras listadas a seguir, vamos tornar nosso código sensível às maiúsculas, o que quer dizer que <code>NOME</code> é diferente de <code>nome</code>."
                        },
                        {
                            "p": "As regras são:"
                        }
                    ]
                },
                {
                    "title": "Tipos de variáveis",
                    "content": [
                        {
                            "ol": [
                                "<strong>Nome da regra:</strong> Os nomes das variáveis devem ser <strong>significativos</strong> e refletir o seu conteúdo. <em>Exemplos:</em> <code>idade</code>, <code>preco</code>, <code>nome</code>, <code>sobrenome</code>.",
                                "<strong>Nome da regra:</strong> Os nomes das variáveis não devem conter espaços ou caracteres especiais. <em>Exemplos:</em> <code>idade<em>cliente</code>, <code>preco</em>produto</code> (<em>corretos</em>); <code>idade cliente</code>, <code>preco-produto</code> (<em>incorretos</em>).",
                                "<strong>Nome da regra:</strong> Os nomes das variáveis não devem começar com números. <em>Exemplos:</em> <code>idade<em>cliente</code> (</em>correto<em>); <code>2idade</em>cliente</code> (<em>incorreto</em>).",
                                "<strong>Nome da regra:</strong> Os nomes das variáveis devem ser escritos em letras minúsculas. <em>Exemplos:</em> <code>idade<em>cliente</code> (</em>correto<em>); <code>IdadeCliente</code> (</em>incorreto_).",
                                "<strong>Nome da regra:</strong> Os nomes das variáveis devem ser curtos e fáceis de lembrar. <em>Exemplos:</em> <code>idade</code> (<em>correto</em>); <code>idade<em>do</em>cliente</code> (<em>incorreto</em>)."
                            ]
                        },
                        {
                            "ul": [
                                "<strong>Inteiras:</strong> Armazenam números inteiros, como 1, 2, 3, 4, 5, etc.",
                                "<strong>Reais:</strong> Armazenam números reais, como 1.5, 2.5, 3.5, 4.5, 5.5, etc.",
                                "<strong>Texto:</strong> Armazenam textos, como \"Maria\", \"Silva\", \"São Paulo\", etc.",
                                "<strong>Lógicas:</strong> Armazenam valores booleanos, como <code>verdadeiro</code> ou <code>falso</code>."
                            ]
                        }
                    ]
                },
                {
                    "title": "Escopo das variáveis",
                    "content": [
                        {
                            "p": "O escopo de uma variável é o trecho do código onde ela pode ser utilizada. Existem dois escopos principais:"
                        },
                        {
                            "ul": [
                                "<strong>Escopo local:</strong> Uma variável declarada dentro de uma função ou bloco de código só pode ser utilizada dentro daquele escopo.",
                                "<strong>Escopo global:</strong> Uma variável declarada fora de qualquer função ou bloco de código pode ser utilizada em qualquer lugar do programa."
                            ]
                        }
                    ]
                },
                {
                    "title": "Operadores de atribuição",
                    "content": [
                        {
                            "p": "Os operadores de atribuição são utilizados para atribuir valores às variáveis. Os principais operadores de atribuição são:"
                        },
                        {
                            "ul": [
                                "<strong>=:</strong> Atribui o valor da expressão à direita do operador à variável à esquerda do operador. <em>Exemplo:</em> <code>idade = 25</code>.",
                                "<strong>+=:</strong> Adiciona o valor da expressão à direita do operador ao valor da variável à esquerda do operador. <em>Exemplo:</em> <code>idade += 1</code>.",
                                "<strong>-=:</strong> Subtrai o valor da expressão à direita do operador ao valor da variável à esquerda do operador. <em>Exemplo:</em> <code>idade -= 1</code>.",
                                "<strong>*=:</strong> Multiplica o valor da expressão à direita do operador pelo valor da variável à esquerda do operador. <em>Exemplo:</em> <code>idade *= 2</code>.",
                                "<strong>/=:</strong> Divide o valor da expressão à direita do operador pelo valor da variável à esquerda do operador. <em>Exemplo:</em> <code>idade /= 2</code>."
                            ]
                        }
                    ]
                },
                {
                    "title": "Operadores de comparação",
                    "content": [
                        {
                            "p": "Os operadores de comparação são utilizados para comparar o valor de duas variáveis ou expressões. Os principais operadores de comparação são:"
                        },
                        {
                            "ul": [
                                "<strong>==:</strong> Igual. <em>Exemplo:</em> <code>idade == 25</code>.",
                                "<strong>!=:</strong> Diferente. <em>Exemplo:</em> <code>idade != 25</code>.",
                                "<strong>>:</strong> Maior que. <em>Exemplo:</em> <code>idade > 25</code>.",
                                "<strong>>=:</strong> Maior ou igual a. <em>Exemplo:</em> <code>idade >= 25</code>.",
                                "<strong><:</strong> Menor que. <em>Exemplo:</em> <code>idade < 25</code>.",
                                "<strong><=:</strong> Menor ou igual a. <em>Exemplo:</em> <code>idade <= 25</code>."
                            ]
                        }
                    ]
                }
            ],
            "lead": "As variáveis são elementos fundamentais em programação, sendo utilizadas para armazenar dados em um programa. Uma variável é um nome que representa um valor, e esse valor pode ser modificado durante a execução do programa."
        },
        {
            "title": "Expressões Booleanas",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Elas são compostas por operandos e operadores booleanos. Os operandos podem ser variáveis ou constantes, e os operadores booleanos são símbolos que indicam a operação a ser realizada."
                        },
                        {
                            "p": "Por exemplo, a seguinte expressão booleana avalia se a variável <code>x</code> é maior que 10:"
                        },
                        {
                            "mockupCode": "x > 10"
                        },
                        {
                            "p": " O resultado da expressão acima é um valor do tipo <strong>booleano</strong>, ou seja, lógico. Neste exemplo acima, se <strong>x</strong> for um número positivo, então a expressão é avaliada como <strong>Verdadeiro</strong>; se <strong>x</strong> for negativo, o resultado é <strong>Falso</strong>. Dados booleanos são fundamentais para avaliação de expressões condicionais. Esses valores são utilizados para controlar o fluxo do programa em estruturas condicionais."
                        },
                        {
                            "p": "Seguem aqui mais alguns exemplos"
                        },
                        {
                            "mockupCodes": [
                                "// Expressão booleana simples",
                                "// Qual será o valor armazenado em `é_maior_de_idade`?",
                                "idade = 18",
                                "é_maior_de_idade = idade >= 18"
                            ]
                        },
                        {
                            "mockupCodes": [
                                "// Uso de operadores lógicos",
                                "nota = 75",
                                "frequencia = 0.8",
                                "passou = nota >= 60 E frequencia >= 0.75"
                            ]
                        }
                    ]
                },
                {
                    "title": "Tabela Verdade do Operador E",
                    "content": [
                        {
                            "table": {
                                "thead": [
                                    "Operando 1",
                                    "Operando 2",
                                    "Resultado"
                                ],
                                "tbody": [
                                    [
                                        "Verdadeiro",
                                        "Verdadeiro",
                                        "Verdadeiro"
                                    ],
                                    [
                                        "Verdadeiro",
                                        "Falso",
                                        "Falso"
                                    ],
                                    [
                                        "Falso",
                                        "Verdadeiro",
                                        "Falso"
                                    ],
                                    [
                                        "Falso",
                                        "Falso",
                                        "Falso"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                {
                    "title": "Tabela Verdade do Operador OU",
                    "content": [
                        {
                            "table": {
                                "thead": [
                                    "Operando 1",
                                    "Operando 2",
                                    "Resultado"
                                ],
                                "tbody": [
                                    [
                                        "Verdadeiro",
                                        "Verdadeiro",
                                        "Verdadeiro"
                                    ],
                                    [
                                        "Verdadeiro",
                                        "Falso",
                                        "Verdadeiro"
                                    ],
                                    [
                                        "Falso",
                                        "Verdadeiro",
                                        "Verdadeiro"
                                    ],
                                    [
                                        "Falso",
                                        "Falso",
                                        "Falso"
                                    ]
                                ]
                            }
                        }
                    ]
                }
            ],
            "lead": "As expressões booleanas são fundamentais em programação para avaliar se uma condição é verdadeira ou falsa."
        },
        {
            "title": "Estrutura Condicional",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Ela é composta por blocos condicionais como Se, Senão Se e Senão, que permitem a execução de diferentes conjuntos de instruções dependendo do resultado de expressões booleanas."
                        }
                    ]
                },
                {
                    "title": "Blocos condicionais mais comuns",
                    "content": [
                        {
                            "ul": [
                                "<strong>Se</strong>: Este bloco é utilizado para verificar uma condição booleana e, se for verdadeira, executar um conjunto de instruções.",
                                "<strong>Senão Se</strong>: Este bloco é utilizado para verificar outra condição booleana e, se for verdadeira, executar um conjunto de instruções. Ele é utilizado em conjunto com o bloco Se.",
                                "<strong>Senão</strong>: Este bloco é utilizado para executar um conjunto de instruções se nenhuma das condições anteriores for verdadeira. Ele é utilizado em conjunto com os blocos Se e Senão Se."
                            ]
                        }
                    ]
                },
                {
                    "title": "Exemplos",
                    "content": [
                        {
                            "mockupCodes": [
                                "// Verificação de maioridade",
                                "idade = 17",
                                "Se idade >= 18 então",
                                "    escreva(\"É maior de idade.\")",
                                "Fim Se"
                            ]
                        },
                        {
                            "p": "Neste exemplo, a variável <code>idade</code> é verificada para determinar se o valor é maior ou igual a 18 anos. Se esta condição for verdadeira, a instrução <code>escreva(\"É maior de idade.\")</code> será executada, exibindo uma mensagem no console."
                        },
                        {
                            "mockupCodes": [
                                "// Classificação de notas",
                                "nota = 75",
                                "Se nota >= 90 então",
                                "    escreva(\"Excelente!\")",
                                "Senão Se nota >= 70 E nota < 90 então",
                                "    escreva(\"Bom trabalho.\")",
                                "Senão",
                                "    escreva(\"Precisa melhorar.\")",
                                "Fim Se"
                            ]
                        },
                        {
                            "p": "Neste exemplo, a variável <code>nota</code> é verificada para determinar a classificação da nota. Se a nota for maior ou igual a 90, a mensagem \"Excelente!\" será exibida. Se a nota for maior ou igual a 70 e menor que 90, a mensagem \"Bom trabalho.\" será exibida. Caso nenhuma das condições anteriores seja verdadeira, a mensagem \"Precisa melhorar.\" será exibida."
                        },
                        {
                            "mockupCodes": [
                                "// Verificação de números e suas características",
                                "numero = -5",
                                "Se numero > 0 E numero mod 2 = 0 então",
                                "    escreva(\"Número positivo e par.\")",
                                "Senão Se numero > 0 E numero mod 2 ≠ 0 então",
                                "    escreva(\"Número positivo e ímpar.\")",
                                "Senão Se numero < 0 OU numero = 0 então",
                                "    escreva(\"Número negativo ou zero.\")",
                                "Fim Se"
                            ]
                        },
                        {
                            "p": "Neste exemplo, a variável <code>numero</code> é verificada para determinar suas características. Se o número for maior que 0 e par, a mensagem \"Número positivo e par.\" será exibida. Se o número for maior que 0 e ímpar, a mensagem \"Número positivo e ímpar.\" será exibida. Se o número for menor que 0 ou igual a 0, a mensagem \"Número negativo ou zero.\" será exibida."
                        }
                    ]
                }
            ],
            "lead": "A estrutura condicional é um componente fundamental na programação, permitindo que o fluxo de execução de um programa seja alterado com base na avaliação de condições."
        },
        {
            "title": "Estruturas de repetição",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "PARA",
                    "content": [
                        {
                            "p": "O <strong>PARA</strong> é utilizado para repetir um conjunto de instruções um número determinado de vezes. Por exemplo, o seguinte código repete o comando escreva(\"Olá, mundo!\") cinco vezes:"
                        },
                        {
                            "mockupCodes": [
                                "// Repetição usando PARA",
                                "para i de 1 até 5 faça",
                                "    escreva(i)",
                                "fim para"
                            ]
                        },
                        {
                            "p": "O código acima irá exibir o resultado:"
                        },
                        {
                            "mockupCodes": [
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ]
                        },
                        {
                            "subsection": "Estrutura do comando PARA"
                        },
                        {
                            "p": "O comando PARA possui a seguinte estrutura:"
                        },
                        {
                            "mockupCodes": [
                                "para <variável> de <valor inicial> até <valor final> faça",
                                "    <conjunto de instruções>",
                                "fim para"
                            ]
                        },
                        {
                            "ul": [
                                "<strong>variável</strong>: é a variável que será utilizada para controlar o número de vezes que o laço será executado.",
                                "<strong>valor inicial</strong>: é o valor inicial da variável.",
                                "<strong>valor final</strong>: é o valor final da variável.",
                                "<strong>conjunto de instruções</strong>: é o conjunto de instruções que serão executadas a cada iteração do laço."
                            ]
                        }
                    ]
                },
                {
                    "title": "ENQUANTO",
                    "content": [
                        {
                            "p": "O <strong>ENQUANTO</strong>, por outro lado, é utilizado para repetir um conjunto de instruções enquanto uma condição específica for verdadeira. A execução continuará até que a condição não seja mais atendida."
                        },
                        {
                            "mockupCodes": [
                                "// Repetição usando ENQUANTO",
                                "contador = 1",
                                "enquanto contador < 5 faça",
                                "    escreva(contador)",
                                "    contador = contador + 1",
                                "fim enquanto"
                            ]
                        },
                        {
                            "p": "O código acima irá exibir o resultado:"
                        },
                        {
                            "mockupCodes": [
                                "1",
                                "2",
                                "3",
                                "4"
                            ]
                        },
                        {
                            "p": "Note que neste exemplo acima, o número 5 não será exibido. Por quê?"
                        },
                        {
                            "subsection": "Estrutura do comando ENQUANTO"
                        },
                        {
                            "p": "O comando ENQUANTO possui a seguinte estrutura:"
                        },
                        {
                            "mockupCodes": [
                                "enquanto <condição> faça",
                                "    <conjunto de instruções>",
                                "fim enquanto"
                            ]
                        },
                        {
                            "ul": [
                                "<strong>condição</strong>: é a condição que será avaliada para determinar se o laço será executado ou não.",
                                "<strong>conjunto de instruções</strong>: é o conjunto de instruções que serão executadas a cada iteração do laço."
                            ]
                        }
                    ]
                }
            ],
            "lead": "Uma outra técnica fundamental na programação é a repetição de comandos (ou laço), permitindo a execução de um conjunto de instruções várias vezes. Existem duas maneiras comuns de implementar a repetição em pseudocódigo: usando o **PARA** e o **ENQUANTO**."
        },
        {
            "title": "Escopo de Variáveis",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Escopo global"
                        }
                    ]
                },
                {
                    "title": "O escopo global",
                    "content": [
                        {
                            "p": "Este é o escopo mais externo de um programa. Variáveis declaradas no escopo global são visíveis em todo o programa, desde que não haja outra variável com o mesmo nome declarada em um escopo interno."
                        },
                        {
                            "mockupCodes": [
                                "programa banco",
                                "// Variáveis declaradas no escopo global",
                                "USUARIO = '01892299'",
                                "SENHA = '123456'",
                                "início",
                                "    // escopo principal",
                                "fim"
                            ]
                        }
                    ]
                },
                {
                    "title": "Escopo principal",
                    "content": [
                        {
                            "p": "O escopo principal é o escopo do bloco de código que inicia o programa. Variáveis declaradas no escopo principal só podem ser acessadas a partir desse bloco de código."
                        },
                        {
                            "mockupCodes": [
                                "programa banco",
                                "// Variáveis declaradas no escopo principal",
                                "Início",
                                "    nova_conta = Conta(USUARIO, SENHA, 0)",
                                "    valor = nova_conta.saldo",
                                "    saque = encerrarConta(nova_conta)",
                                "Fim"
                            ]
                        }
                    ]
                },
                {
                    "title": "Visibilidade de variáveis",
                    "content": [
                        {
                            "p": "A visibilidade de uma variável é determinada pelo seu escopo. Variáveis declaradas no mesmo escopo são visíveis umas para as outras. Variáveis declaradas em escopos diferentes não são visíveis umas para as outras, a menos que sejam declaradas como <code>public</code>."
                        },
                        {
                            "p": "// Variáveis declaradas no mesmo escopo são visíveis umas para as outras"
                        },
                        {
                            "p": "USUARIO, SENHA, nova_conta"
                        }
                    ]
                },
                {
                    "title": "Regras de escopo",
                    "content": [
                        {
                            "p": "As regras de escopo são as seguintes:"
                        },
                        {
                            "ul": [
                                "Uma variável só pode ser declarada uma vez em um determinado escopo.",
                                "Uma variável declarada em um escopo interno não pode ser acessada a partir de um escopo externo.",
                                "Uma variável declarada em um escopo externo pode ser acessada a partir de um escopo interno."
                            ]
                        }
                    ]
                },
                {
                    "title": "Exemplo 1: Variáveis de escopo em uma função",
                    "content": [
                        {
                            "p": "Aqui está um exemplo de como variáveis de escopo podem ser usadas em uma função:"
                        },
                        {
                            "mockupCodes": [
                                "Programa fatorial",
                                "// Função que calcula o fatorial de um número",
                                "Função fatorial(n):",
                                "    // Variável declarada no escopo interno da função",
                                "    resultado = 1",
                                "    // Laço for que itera de 1 até n",
                                "    para i = 1 até n:",
                                "        // Atualiza o valor da variável `resultado`",
                                "        resultado = resultado * i",
                                "    // Retorna o valor da variável `resultado`",
                                "    retorna resultado",
                                "Fim Função",
                                "Início",
                                "    resultado = fatorial(3)",
                                "    escreva(resultado) // será exibido o valor 6",
                                "Fim"
                            ]
                        }
                    ]
                }
            ],
            "lead": "As variáveis em um programa têm diferentes escopos, determinando onde elas podem ser acessadas e modificadas. No exemplo anterior, a variável USUARIO e SENHA são globais, pois são definidas fora de qualquer função ou classe, e podem ser acessadas por qualquer \"sub escopo\", como o escopo principal, enquanto as variáveis usuario, senha, e saldo dentro da classe Conta têm escopo local à classe."
        },
        {
            "title": "Fluxo de Execução",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Normalmente, o fluxo de execução de um algoritmo, código ou programa é sequencial e em série, isto é, cada comando é executado após o outro, e somente após o anterior ser finalizado."
                        },
                        {
                            "p": "Em pseudo código, podemos, conceitualmente, separar um código em dois escopos: escopo global e escopo principal."
                        },
                        {
                            "ul": [
                                "Global: define \"sub programas\", também chamado de subrotinas, ou define dados ou estruturas globais de dados, como classes.",
                                "Principal: define a execução principal do programa. É onde a \"leitura\" do programa se inicia."
                            ]
                        }
                    ]
                },
                {
                    "title": "Exemplo 1: Fluxo de Execução em um Algoritmo de Conta Bancária",
                    "content": [
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para um algoritmo simples de conta bancária",
                                "// escopo global",
                                "USUARIO = '01892299'",
                                "SENHA = '123456'",
                                "Classe Conta(u, se, sa):",
                                " ",
                                "    usuario = u",
                                "    senha = se",
                                "    saldo = sa",
                                "    Função depositar(valor):",
                                "        classe.saldo = classe.saldo + valor",
                                "    Fim Função",
                                "    Função sacar(valor, u, se):",
                                "        se u == classe.usuario E se == classe.senha:",
                                "            classe.saldo = classe.saldo - valor",
                                "            retorna valor",
                                "        se não:",
                                "            retorna ErroDeValidação",
                                "    Fim Função",
                                "    Função verificarSaldo(u, se):",
                                "        se u == classe.usuario E se == classe.senha:",
                                "            retorna classe.saldo",
                                "        se não:",
                                "            retorna ErroDeValidação",
                                "    Fim Função",
                                "Fim Classe",
                                "Função encerrarConta(conta):",
                                "    valor = conta.saldo",
                                "    saque = conta.sacar(valor)",
                                "    delete conta  // apaga a variável conta",
                                "    retorna saque",
                                "    Fim Função",
                                "// escopo principal",
                                "Início",
                                "    nova_conta = Conta(USUARIO, SENHA, 0)",
                                "    escreva(nova_conta.saldo) // resultado: 0",
                                "    nova_conta.depositar(100)",
                                "    escreva(nova_conta.verificarSaldo()) // resultado: 100",
                                "    sacar(50, USUARIO, SENHA)",
                                "    escreva(nova_conta.verificarSaldo()) // resultado: 50",
                                "    saque = encerrarConta(nova_conta, USUARIO, SENHA)",
                                "    escreva(nova_conta.verificarSaldo()) // dá erro pois a variável `conta` foi deletada",
                                "Fim"
                            ]
                        },
                        {
                            "p": "Nesse algoritmo, o fluxo de execução é o seguinte:"
                        },
                        {
                            "ol": [
                                "No escopo global, são definidas as variáveis <code>USUARIO</code> e <code>SENHA</code>, que serão usadas para autenticação nas operações bancárias. Também é definida a classe <code>Conta</code>, que representa uma conta bancária com os atributos <code>usuario</code>, <code>senha</code>, <code>saldo</code> e os métodos <code>depositar()</code>, <code>sacar()</code> e <code>verificarSaldo()</code>.",
                                "No escopo principal, é criada uma nova conta bancária usando a classe <code>Conta</code>.",
                                "O saldo da nova conta é exibido na tela (resultado: 0).",
                                "É feito um depósito de 100 reais na conta.",
                                "O saldo da conta é exibido novamente na tela (resultado: 100).",
                                "É feita uma retirada de 50 reais da conta, usando a função <code>sacar()</code>.",
                                "O saldo da conta é exibido novamente na tela (resultado: 50).",
                                "É encerrada a conta bancária usando a função <code>encerrarConta()</code>, que retorna o saldo da conta após o encerramento.",
                                "É exibido na tela o saldo da conta encerrada (dá erro, pois a variável <code>conta</code> foi deletada)."
                            ]
                        }
                    ]
                }
            ],
            "lead": "O fluxo de execução de um algoritmo é a sequência de etapas que ele segue para resolver um problema."
        },
        {
            "title": "Exercícios Resolvidos",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "Exercício 1: Cálculo de distância",
                    "content": [
                        {
                            "p": "Escreva um algoritmo para calcular a distância entre dois pontos no espaço bidimensional. Os pontos são representados por suas coordenadas <em>(x1, y1)</em> e <em>(x2, y2)</em>."
                        },
                        {
                            "ul": [
                                "Solução:"
                            ]
                        },
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para calcular a distância entre dois pontos",
                                "Programa distancia",
                                "Função distanciaEntrePontos(x1, y1, x2, y2):",
                                "    distância = sqrt((x2 - x1)^2 + (y2 - y1)^2)",
                                "    Retornar distância",
                                "Fim Função",
                                "// Uso da função",
                                "Início",
                                "    x1 = 1",
                                "    y1 = 2",
                                "    x2 = 4",
                                "    y2 = 6",
                                "    distânciaCalculada = distanciaEntrePontos(x1, y1, x2, y2)",
                                "    escreva(\"A distância entre os pontos é: \" + distânciaCalculada)",
                                "Fim"
                            ]
                        }
                    ]
                },
                {
                    "title": "Exercício 2: Fatorial de um número",
                    "content": [
                        {
                            "p": "Escreva um algoritmo para calcular o fatorial de um número inteiro não negativo. O fatorial de um número n é o produto de todos os números inteiros positivos menores ou iguais a n. Por exemplo, o fatorial de 5 é 5 * 4 * 3 * 2 * 1 = 120."
                        },
                        {
                            "ul": [
                                "Solução:"
                            ]
                        },
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para calcular o fatorial de um número",
                                "Programa fatorial",
                                "Função fatorial(n):",
                                "    fatorial = 1",
                                "    para i de 1 até n:",
                                "        fatorial = fatorial * i",
                                "    fim para",
                                "    Retornar fatorial",
                                "Fim Função",
                                "// Uso da função",
                                "Início",
                                "    n = 5",
                                "    fatorialCalculado = fatorial(n)",
                                "    escreva(\"O fatorial de \" + n + \" é: \" + fatorialCalculado)",
                                "Fim"
                            ]
                        },
                        {
                            "p": "Escreva um algoritmo para imprimir todos os números pares entre 1 e 100."
                        },
                        {
                            "ul": [
                                "Solução:"
                            ]
                        },
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para imprimir números pares entre 1 e 100",
                                "Programa pares",
                                "Início",
                                "    para i de 1 até 100:",
                                "        se i%2 == 0:",
                                "            escreva(i)",
                                "        fim se",
                                "    fim para",
                                "Fim"
                            ]
                        },
                        {
                            "p": "Escreva um algoritmo para calcular a média de uma sequência de números inseridos pelo usuário."
                        },
                        {
                            "p": "Solução:"
                        },
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para calcular a média de uma sequência de números",
                                "Programa media",
                                "Início",
                                "    soma = 0",
                                "    quantidade = 0",
                                "    // repetição (laço) infinito",
                                "    enquanto Verdadeiro:",
                                "        // ler número fornecido pelo usuário do programa",
                                "        número = entrada()",
                                "        se numero == 0:",
                                "            sair  // interrompe a repetição",
                                "        fim se",
                                "        soma = soma + número",
                                "        quantidade = quantidade + 1",
                                "    fim enquanto",
                                "    média = soma / quantidade",
                                "    escreva(\"A média da sequência é: \" + média)",
                                "Fim"
                            ]
                        },
                        {
                            "p": "Escreva um algoritmo para encontrar o maior elemento de uma sequência de números inseridos pelo usuário."
                        },
                        {
                            "p": "Solução:"
                        },
                        {
                            "mockupCodes": [
                                "// Pseudocódigo para encontrar o maior elemento de uma sequência de números",
                                "Programa maior",
                                "Início",
                                "    maior = 0",
                                "    enquanto Verdadeiro:",
                                "        número = entrada()",
                                "        se numero == '':",
                                "            sair",
                                "        fim se",
                                "        se número > maior:",
                                "            maior = número",
                                "        fim se",
                                "    fim enquanto",
                                "    escreva(\"O maior elemento da sequência é: \" + maior)",
                                "Fim"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Problemas propostos",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "Área do triângulo",
                    "content": [
                        {
                            "ul": [
                                "Escreva um algoritmo para calcular a área de um triângulo. A altura e a base são fornecidas pelo usuário."
                            ]
                        }
                    ]
                },
                {
                    "title": "Aceleração",
                    "content": [
                        {
                            "ul": [
                                "Considere <code>m</code> e <code>a</code> (massa e aceleração de um corpo, respectivamente) os valores de entrada de um programa. Escreva um algorítimo em pseudocódigo para calcular a força resultante. <code>m</code> e <code>a</code> são fornecidos pelo usuário"
                            ]
                        }
                    ]
                },
                {
                    "title": "Ângulo de um vetor",
                    "content": [
                        {
                            "ul": [
                                "Escreva um programa o qual, dadas as componentes <code>x</code> e <code>y</code> de um vetor, calcula o ângulo do vetor com o eixo x."
                            ]
                        }
                    ]
                },
                {
                    "title": "Tensão máxima",
                    "content": [
                        {
                            "ul": [
                                "A tensão máxima que um certo cabo de aço consegue suportar é <code>20000 N</code>. Escreva um algorítimo em pseudocódigo para determinar se este cabo consegue suportar o peso de um certo corpo de massa. Use a gravidade como 9,8 m/s². Seu programa deve escrever \"suporta\" caso o cabo suporte; e \"não suporta\" caso o cabo não suporte"
                            ]
                        }
                    ]
                },
                {
                    "title": "Derivada",
                    "content": [
                        {
                            "ul": [
                                "Escreva um algorítimo em pseudocódigo para calcular a derivada da função <math display=\"inline\"><msup><mi>2</mi><mn>-x</mn></msup>cos(x)</math>. Use a definição da derivada como um limite e escolha a variação como uma variável de escopo global."
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
{
    "articles": [
        {
            "title": "Estruturas de dados",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "O ramo da Ciência da Computação que estuda estes conceitos é a <a href=\"https://en.wikipedia.org/wiki/Data_structure\">Estrutura de Dados</a>."
                        },
                        {
                            "p": "Uma <strong>estrutura de dados</strong> também se refere à forma como dados são organizados, gerenciados e armazenados, e serve de base para os <a href=\"https://en.wikipedia.org/wiki/Abstract<em>data</em>type\">tipos de dados abstratos</a>, que são estruturas que contém domínio, operações e vínculos sobre operações. As operações definem uma interface entre o programa e o tipo de dados, permitindo que o programa manipule dados sem ter conhecimento de sua implementação interna."
                        },
                        {
                            "p": "Diferentes tipos de estruturas de dados podem ser adequados para diferentes tipos de aplicações. Alguns tipos comuns de estruturas de dados incluem:"
                        },
                        {
                            "ul": [
                                "<strong>Arrays:</strong> Um array é uma coleção de elementos do mesmo tipo que são armazenados em endereços de memória contíguos. Os elementos de um array podem ser acessados usando um índice numérico.",
                                "<strong>Listas:</strong> Uma lista é uma coleção de elementos do mesmo tipo ou de tipos diferentes que são armazenados em nós ligados individualmente. Os nós de uma lista podem ser adicionados ou removidos em qualquer posição, o que a torna uma estrutura de dados dinâmica.",
                                "<strong>Pilhas:</strong> Uma pilha é uma coleção de elementos do mesmo tipo que são armazenados em um princípio de \"último a entrar, primeiro a sair\" (LIFO). Os elementos de uma pilha são adicionados ao topo da pilha e removidos do topo da pilha.",
                                "<strong>Filas:</strong> Uma fila é uma coleção de elementos do mesmo tipo que são armazenados em um princípio de \"primeiro a entrar, primeiro a sair\" (FIFO). Os elementos de uma fila são adicionados ao final da fila e removidos do início da fila.",
                                "<strong>Conjuntos</strong>: Um conjunto é uma coleção não ordenada de elementos distintos. Ele não permite elementos duplicados e é útil para verificar a existência de um elemento em uma coleção de maneira eficiente. Os conjuntos oferecem operações como união, interseção e diferença para manipulação de elementos.",
                                "<strong>Mapas/Dicionários</strong>: Um mapa, também conhecido como dicionário em algumas linguagens de programação, é uma estrutura de dados que mapeia chaves para valores. Cada chave é única e associada a um valor correspondente. Os mapas permitem acesso eficiente aos valores por meio de suas chaves e são úteis para armazenar e recuperar dados de maneira rápida. Eles oferecem operações para adicionar, remover e atualizar elementos, além de permitir a iteração sobre suas chaves e valores."
                            ]
                        }
                    ]
                }
            ],
            "lead": "A forma como programas funcionam dependem de como valores são acessados de uma fonte de dados, como a memória RAM, quais as relações entre esses valores e quais operações são possíveis de se executar sobre os dados."
        },
        {
            "title": "Listas e vetores (arrays)",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "O que são listas e vetores?",
                    "content": [
                        {
                            "p": "Listas e vetores são estruturas de dados fundamentais que armazenam uma coleção de elementos, onde cada elemento possui uma posição única. Eles são amplamente utilizados em programação para armazenar e manipular dados de forma eficiente."
                        }
                    ]
                },
                {
                    "title": "Como criar listas e vetores em pseudocódigo?",
                    "content": [
                        {
                            "p": "Em pseudocódigo, podemos criar uma lista ou vetor da seguinte forma:"
                        },
                        {
                            "mockupCodes": [
                                "numeros = [1, 2, 3, 4, 5]",
                                "nomes = [\"Fulano\", \"Beltrana\", \"João Ninguém\"]"
                            ]
                        }
                    ]
                },
                {
                    "title": "Tipos de elementos em listas e vetores",
                    "content": [
                        {
                            "p": "As listas e os vetores podem armazenar elementos de diversos tipos, incluindo inteiros, números reais, strings e até outras listas ou vetores."
                        },
                        {
                            "p": "Aqui estão alguns exemplos:"
                        },
                        {
                            "mockupCodes": [
                                "lista_numeros = [1, 2, 3, 4, 5] // lista de números inteiros",
                                "lista_nomes = [\"Fulano\", \"Beltrana\", \"João Ninguém\"] // lista de strings",
                                "lista_mista = [1, \"dois\", 3.14, True] // lista com elementos de tipos diferentes"
                            ]
                        }
                    ]
                },
                {
                    "title": "Quais são as principais vantagens de listas e vetores?",
                    "content": [
                        {
                            "p": "Listas e vetores são estruturas de dados muito versáteis e oferecem várias vantagens:"
                        }
                    ]
                },
                {
                    "title": "Operações",
                    "content": [
                        {
                            "ol": [
                                "<strong>Armazenamento de dados sequenciais</strong>: As listas são usadas para armazenar coleções de elementos em uma ordem específica. Isso é útil em situações onde a ordem dos elementos é relevante, como em listas de tarefas, histórico de atividades, etc.",
                                "<strong>Implementação de pilhas (stacks) e filas (queues)</strong>: As listas podem ser usadas para implementar pilhas e filas, onde os elementos são adicionados e removidos de acordo com o princípio \"último a entrar, primeiro a sair\" (LIFO) para pilhas e \"primeiro a entrar, primeiro a sair\" (FIFO) para filas.",
                                "<strong>Iteração e processamento de dados</strong>: Listas são frequentemente usadas em loops e iterações para processar uma sequência de elementos. Isso pode envolver a execução de operações em cada elemento da lista, filtragem com base em critérios específicos, ou agregação de valores.",
                                "<strong>Armazenamento de resultados de consultas ou cálculos</strong>: As listas são usadas para armazenar os resultados de consultas a bancos de dados, cálculos matemáticos ou processamento de dados de entrada, permitindo fácil acesso e manipulação desses resultados.",
                                "<strong>Implementação de estruturas de dados complexas</strong>: Listas são componentes básicos de muitas outras estruturas de dados, como árvores, grafos e matrizes. Elas podem ser usadas para representar conexões entre elementos ou para organizar dados em uma estrutura hierárquica.",
                                "<strong>Ordenação e busca de elementos</strong>: Listas podem ser ordenadas de acordo com critérios específicos, facilitando a busca e recuperação de elementos. Algoritmos de ordenação como o <em>merge sort</em>, <em>quicksort</em> e <em>bubble sort</em> são comumente aplicados a listas.",
                                "<strong>Implementação de menus e interfaces de usuário</strong>: Em interfaces de usuário de aplicativos, as listas são frequentemente usadas para exibir opções de menu, escolhas de seleção, ou listagens de itens em uma grade.",
                                "<strong>Gerenciamento de memória</strong>: Em linguagens de baixo nível, as listas podem ser usadas para alocar e gerenciar blocos de memória dinâmica, permitindo a criação de estruturas de dados flexíveis.",
                                "<strong>Manipulação de dados estruturados</strong>: Listas podem ser usadas para representar dados estruturados, como registros em um banco de dados ou propriedades de objetos em linguagens de programação orientadas a objetos.",
                                "<strong>Implementação de estruturas de controle</strong>: Listas podem ser usadas para armazenar condições ou casos em estruturas de controle condicional, como em uma série de instruções if-else ou em um switch-case."
                            ]
                        },
                        {
                            "ul": [
                                "<strong>Adicionar elementos:</strong> Adiciona um novo elemento à lista ou vetor.",
                                "<strong>Acessar elementos:</strong> Obter o valor de um elemento específico na lista ou vetor.",
                                "<strong>Remover elementos:</strong> Remove um elemento específico da lista ou vetor.",
                                "<strong>Concatenação:</strong> Combina duas ou mais listas ou vetores em uma única lista ou vetor.",
                                "<strong>Tamanho:</strong> Retorna o número de elementos da lista ou vetor."
                            ]
                        }
                    ]
                },
                {
                    "title": "Operações",
                    "content": [
                        {
                            "p": "As operações em lstas de pseudocódigos seguem uma sintaxe relaxada: desde que você descreva como funciona o método ou função de operação sobre uma ou mais listas, e quais os seus argumetos e seus tipos, você é livre para expressar operações em listas usando pseudocódigos. A notação que vamos adotar aqui é de métodos de objetos: um ponto separa o nome do objeto (da lista, no caso) e do método."
                        },
                        {
                            "p": "Antes, vamos definir o acesso aos elementos de uma lista."
                        },
                        {
                            "subsection": "1. Acessar elementos (índices)"
                        },
                        {
                            "p": "Usamos a notação de índices (número inteiro entre par de colchetes) para representas o acesso de um elemento em uma lista. Listas são sequÊncias de elementos indexados, geralmente começado pelo índice zero:"
                        },
                        {
                            "mockupCodes": [
                                "// Acessar primeiro elemento da lista",
                                "numeros = [1, 2, 3, 4, 5]",
                                "elemento = numeros[0]"
                            ]
                        },
                        {
                            "mockupCodes": [
                                "// Acessar o qurato elemento da lista",
                                "numeros = [1, 2, 3, 4, 5]",
                                "elemento = numeros[3]"
                            ]
                        },
                        {
                            "subsection": "2. Adicionar elementos"
                        },
                        {
                            "p": "Podemos definir uma função de nome <em>AdicionarAoFinal</em>:"
                        },
                        {
                            "mockupCodes": [
                                "// Adicionar elemento ao final da lista",
                                "PROGRAMA adiciona_elementos",
                                "FUNÇÃO AdicionarAoFinal(lista, elemento):",
                                "    // Adiciona 'elemento' ao final",
                                "    // de 'lista'. Retorna o resultado",
                                "FIM FUNÇÃO",
                                "INICIO",
                                "    numeros = [1, 2, 3, 4, 5]",
                                "    novos_numeros = AdicionarAoFinal(numeros, 6)",
                                "    escreva(novos_numeros)",
                                "FIM"
                            ]
                        },
                        {
                            "p": "O resultado do programa acima é <em>[1, 2, 3, 4, 5]</em>"
                        },
                        {
                            "p": "Podemos também definir uma operação de <em>AdicionarNaPosicao</em>:"
                        },
                        {
                            "mockupCodes": [
                                "// Adicionar elemento em uma posição específica",
                                "PROGRAMA adiciona_elementos",
                                "FUNÇÃO AdicionarNaposicao(lista, elemento, posicao):",
                                "    // Adiciona 'elemento' em 'posicao'",
                                "    // de 'lista'. Retorna o resultado",
                                "FIM FUNÇÃO",
                                "INICIO",
                                "    numeros = [1, 2, 3, 4, 5]",
                                "    novos_numeros = AdicionarNaposicao(numeros, 6, 2)",
                                "    escreva(novos_numeros)",
                                "FIM"
                            ]
                        },
                        {
                            "p": "Alternativamente, e preferencialmente, podemos definir métodos de litas como notação alternativa. Neste caso, as operações alteram a lista:"
                        },
                        {
                            "mockupCodes": [
                                "// Adicionar elemento em uma posição específica",
                                "PROGRAMA adiciona_elementos",
                                "// O método 'insert(elemento, posicao)' adiciona",
                                "// o valor 'elemento' na 'posicao' modificando a lista",
                                "INICIO",
                                "    numeros = [1, 2, 3, 4, 5]",
                                "    lista.insert(2.5, 2)",
                                "    escreva(numeros)",
                                "    //resultado: [1, 2, 2.5, 3, 4, 5]",
                                "FIM"
                            ]
                        },
                        {
                            "mockupCodes": [
                                "// Adicionar elementoao final",
                                "PROGRAMA adiciona_elementos_ao_final",
                                "// O método 'append(elemento, posicao)' adiciona",
                                "// o valor 'elemento' ao final da lista",
                                "INICIO",
                                "    numeros = [1, 2, 3, 4, 5]",
                                "    lista.append('EOF')",
                                "    escreva(numeros)",
                                "    //resultado: [1, 2, 3, 4, 5, 'EOF']",
                                "FIM"
                            ]
                        },
                        {
                            "p": "Daqui pra frente vamos preferir a notação de métodos de objetos."
                        },
                        {
                            "subsection": "3. Remover elementos"
                        },
                        {
                            "p": "Para remover elementos de uma lista ou vetor, podemos utilizar a operação de remoção. Existem duas formas comuns de remoção:"
                        },
                        {
                            "p": "* <strong>Remoção por índice:</strong> Remove o elemento na posição especificada pelo índice."
                        },
                        {
                            "p": "* <strong>Remoção por valor:</strong> Remove o primeiro elemento que corresponde ao valor especificado."
                        },
                        {
                            "p": "Aqui estão alguns exemplos de remoção de elementos em pseudocódigo:"
                        },
                        {
                            "mockupCodes": [
                                "numeros = [1, 2, 3, 4, 5]",
                                "numeros.remover(2)  # remove o elemento na posição 2",
                                "escrever(numeros)  # [1, 2, 4, 5]",
                                "lista_nomes = [\"Fulano\", \"Beltrana\", \"João Ninguém\"]",
                                "lista_nomes.remover(\"Beltrana\")  # remove o primeiro elemento com o valor \"Beltrana\"",
                                "escrever(lista_nomes)  # [\"Fulano\", \"João Ninguém\"]"
                            ]
                        },
                        {
                            "subsection": "4. Concatenação"
                        },
                        {
                            "p": "A concatenação é a operação de unir duas ou mais listas ou vetores em uma única lista ou vetor. Em pseudocódigo, podemos utilizar o operador \"+\" para realizar a concatenação."
                        },
                        {
                            "p": "Aqui está um exemplo de concatenação em pseudocódigo:"
                        },
                        {
                            "mockupCodes": [
                                "numeros1 = [1, 2, 3]",
                                "numeros2 = [4, 5, 6]",
                                "numeros_concatenados = numeros1 + numeros2",
                                "escrever(numeros_concatenados)  # [1, 2, 3, 4, 5, 6]"
                            ]
                        },
                        {
                            "subsection": "5. Tamanho"
                        },
                        {
                            "p": "É muito comum que lingagens de programação modernas definam o método (ou função) de se obter diretamente o tamanho (número de elementos) em uma lista:"
                        },
                        {
                            "mockupCodes": [
                                "numeros = [1, 2, 3]",
                                "// parecido com Javascript:",
                                "tamanho = numeros.tamanho();",
                                "escrever(tamanho)  # 3",
                                "// parecido com Python:",
                                "tamanho = tamanho(numeros);",
                                "escrever(tamanho)  # 3"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Conjuntos",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Conjuntos são úteis para diversas aplicações, como:"
                        },
                        {
                            "ul": [
                                "Armazenar e verificar se um elemento está presente em um conjunto.",
                                "Encontrar a interseção, união e diferença entre conjuntos.",
                                "Remover elementos duplicados de uma lista."
                            ]
                        },
                        {
                            "p": "Em pseudocódigo, podemos criar um conjunto da seguinte forma:"
                        },
                        {
                            "mockupCode": "conjunto = {1, 2, 3, \"banana\", True}"
                        },
                        {
                            "p": "Conjuntos podem armazenar elementos de diversos tipos, incluindo inteiros, números reais, textos, e até mesmo outros conjuntos."
                        },
                        {
                            "p": "Aqui estão alguns exemplos:"
                        },
                        {
                            "mockupCodes": [
                                "conjunto_numeros = {1, 2, 3, 4, 5}",
                                "conjunto_nomes = {\"Fulano\", \"Beltrana\", \"João Ninguém\"}",
                                "conjunto_mista = {1, \"dois\", 3.14, True, {1, 2}}"
                            ]
                        }
                    ]
                },
                {
                    "title": "Aplicações",
                    "content": [
                        {
                            "ul": [
                                "<strong>Eficiência:</strong> A busca por um elemento em um conjunto é muito rápida, mesmo em conjuntos com muitos elementos.",
                                "<strong>Simplicidade:</strong> A implementação de conjuntos é relativamente simples.",
                                "<strong>Versatilidade:</strong> Conjuntos podem ser usados para diversas aplicações."
                            ]
                        }
                    ]
                },
                {
                    "title": "Operações",
                    "content": [
                        {
                            "p": "Vamos use notação de métodos para apresentar operações em conjuntos aqui."
                        },
                        {
                            "subsection": "1. Acessar elementos"
                        },
                        {
                            "p": "Em conjuntos, não podemos acessar elementos diretamente por índice, pois eles não são ordenados."
                        },
                        {
                            "subsection": "2. Adicionar elementos"
                        },
                        {
                            "p": "Para adicionar um elemento a um conjunto, podemos usar a operação adicionar. Essa operação verifica se o elemento já existe no conjunto e, se não existir, o adiciona."
                        },
                        {
                            "mockupCodes": [
                                "conjunto = {1, 2, 3}",
                                "conjunto.adicionar(4)",
                                "escrever(conjunto)  # {1, 2, 3, 4}"
                            ]
                        },
                        {
                            "subsection": "3. Remover elementos"
                        },
                        {
                            "p": "Para remover um elemento de um conjunto, podemos usar a operação remover. Essa operação verifica se o elemento existe no conjunto e, se existir, o remove."
                        },
                        {
                            "mockupCodes": [
                                "conjunto = {1, 2, 3}",
                                "conjunto.remover(2)",
                                "escrever(conjunto)  # {1, 3}"
                            ]
                        },
                        {
                            "subsection": "4. Verificar se um elemento está presente"
                        },
                        {
                            "p": "Para verificar se um elemento está presente em um conjunto, podemos usar a operação contem. Essa operação retorna True se o elemento estiver presente no conjunto e False caso contrário."
                        },
                        {
                            "mockupCodes": [
                                "conjunto = {1, 2, 3}",
                                "contem_elemento = conjunto.contem(2)",
                                "escrever(contem_elemento)  # True"
                            ]
                        },
                        {
                            "subsection": "5. Operações entre conjuntos"
                        },
                        {
                            "p": "Podemos realizar diversas operações entre conjuntos, como:"
                        },
                        {
                            "ul": [
                                "<strong>União:</strong> A união de dois conjuntos é um conjunto que contém todos os elementos dos dois conjuntos originais.",
                                "<strong>Interseção:</strong> A interseção de dois conjuntos é um conjunto que contém apenas os elementos que estão presentes em ambos os conjuntos originais.",
                                "<strong>Diferença:</strong> A diferença de dois conjuntos é um conjunto que contém os elementos que estão presentes no primeiro conjunto, mas não estão presentes no segundo conjunto."
                            ]
                        },
                        {
                            "mockupCodes": [
                                "conjunto1 = {1, 2, 3}",
                                "conjunto2 = {3, 4, 5}",
                                "uniao = conjunto1.uniao(conjunto2)",
                                "escrever(uniao)  # {1, 2, 3, 4, 5}",
                                "intersecao = conjunto1.intersecao(conjunto2)",
                                "escrever(intersecao)  # {3}",
                                "diferenca = conjunto1.diferenca(conjunto2)",
                                "escrever(diferenca)  # {1, 2}"
                            ]
                        }
                    ]
                }
            ],
            "lead": "Um conjunto é uma estrutura de dados que armazena uma coleção de elementos únicos e não ordenados. Isso significa que cada elemento só pode aparecer uma vez no conjunto, e não há ordem específica entre os elementos."
        },
        {
            "title": "Dicionários/Mapas",
            "sections": [
                {
                    "title": null,
                    "content": [
                        {
                            "p": "Em pseudocódigo, podemos criar um dicionário da seguinte forma:"
                        },
                        {
                            "mockupCodes": [
                                "dicionario = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo'}",
                                "dicionario_vazio = {}"
                            ]
                        },
                        {
                            "p": "Dicionários podem armazenar pares de chave-valor de diversos tipos, incluindo inteiros, números reais, textos e até mesmo outros dicionários."
                        },
                        {
                            "p": "Aqui estão alguns exemplos:"
                        },
                        {
                            "mockupCodes": [
                                "diccionario_numeros = {'um': 1, 'dois': 2, 'três': 3}",
                                "diccionario_nomes = {'Fulano': 30, 'Beltrana': 25, 'João Ninguém': 40}",
                                "diccionario_misto = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo', 'hobbies': ['viajar', 'ler', 'assistir filmes']}"
                            ]
                        }
                    ]
                },
                {
                    "title": "Aplicações",
                    "content": [
                        {
                            "p": "Os dicionários são uma estrutura de dados fundamental em muitas linguagens de programação, incluindo Python, JavaScript e outras. Eles são úteis para uma variedade de casos de uso, incluindo:"
                        }
                    ]
                },
                {
                    "title": "Operações",
                    "content": [
                        {
                            "ol": [
                                "<strong>Armazenamento de dados indexados por chaves</strong>: Os dicionários permitem associar valores a chaves únicas, proporcionando um meio eficiente de armazenar e recuperar dados.",
                                "<strong>Acesso rápido a dados</strong>: Como os dicionários são implementados com tabelas de hash (em muitas linguagens), eles oferecem acesso rápido aos dados com base na chave, em vez de precisar percorrer uma lista ou matriz.",
                                "<strong>Configurações e opções de aplicativos</strong>: Os dicionários são frequentemente usados para armazenar configurações e opções de aplicativos devido à sua capacidade de associar chaves descritivas a valores específicos.",
                                "<strong>Tradução de chaves</strong>: Em muitos casos, dicionários são usados para mapear chaves de entrada para chaves de saída, como em tradução de idiomas ou em sistemas de substituição de variáveis em strings de formatação.",
                                "<strong>Armazenamento de metadados</strong>: Os dicionários podem ser usados para armazenar metadados sobre objetos, como atributos adicionais em objetos de banco de dados ou propriedades de objetos em linguagens orientadas a objetos.",
                                "<strong>Cache de dados</strong>: Dicionários são frequentemente usados para implementar caches de dados em memória, onde os resultados de cálculos anteriores ou consultas a banco de dados são armazenados para acesso rápido posteriormente.",
                                "<strong>Indexação de documentos</strong>: Em sistemas de busca e indexação de documentos, os dicionários podem ser usados para armazenar índices que mapeiam termos de pesquisa para documentos nos quais esses termos aparecem.",
                                "<strong>Armazenamento de grafos e relacionamentos</strong>: Em implementações simples de grafos, os dicionários podem ser usados para representar listas de adjacência, onde cada nó é mapeado para uma lista de seus vizinhos.",
                                "<strong>Validação de entrada de dados</strong>: Dicionários podem ser usados para validar e filtrar dados de entrada em aplicativos, garantindo que apenas chaves específicas estejam presentes e que os valores correspondentes atendam a determinados critérios."
                            ]
                        },
                        {
                            "subsection": "1. Acessar valores"
                        },
                        {
                            "p": "Para acessar um valor em um dicionário, podemos usar a operação obter. Essa operação recebe a chave do par chave-valor que queremos acessar e retorna o valor associado a essa chave."
                        },
                        {
                            "mockupCodes": [
                                "diccionario = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo'}",
                                "nome = diccionario.obter('nome')",
                                "escrever(nome)  # Fulano",
                                "// ou",
                                "idade = diccionario['idade']",
                                "escrever(idade)  # 30"
                            ]
                        },
                        {
                            "subsection": "2. Adicionar pares de chave-valor"
                        },
                        {
                            "p": "Para adicionar um par de chave-valor a um dicionário, podemos usar a operação adicionar. Essa operação recebe a chave e o valor do novo par e os adiciona ao dicionário."
                        },
                        {
                            "mockupCodes": [
                                "diccionario = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo'}",
                                "diccionario.adicionar('profissão', 'programador')",
                                "escrever(diccionario)  # {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo', 'profissão': 'programador'}"
                            ]
                        },
                        {
                            "subsection": "3. Remover pares de chave-valor"
                        },
                        {
                            "p": "Para remover um par de chave-valor de um dicionário, podemos usar a operação remover. Essa operação recebe a chave do par que queremos remover e o remove do dicionário."
                        },
                        {
                            "mockupCodes": [
                                "diccionario = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo'}",
                                "diccionario.remover('idade')",
                                "escrever(diccionario)  # {'nome': 'Fulano', 'cidade': 'São Paulo'}"
                            ]
                        },
                        {
                            "subsection": "4. Verificar se uma chave está presente"
                        },
                        {
                            "p": "Para verificar se uma chave está presente em um dicionário, podemos usar a operação contem. Essa operação recebe a chave que queremos verificar e retorna True se a chave estiver presente no dicionário e False caso contrário."
                        },
                        {
                            "mockupCodes": [
                                "diccionario = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo'}",
                                "contem_chave = diccionario.contem('idade')",
                                "escrever(contem_chave)  # True"
                            ]
                        },
                        {
                            "subsection": "5. Iterar sobre os pares de chave-valor"
                        },
                        {
                            "p": "Para iterar sobre os pares de chave-valor de um dicionário, podemos usar a operação iterar. Essa operação retorna uma sequência de pares de chave-valor, que podem ser iterados usando um laço for."
                        },
                        {
                            "mockupCodes": [
                                "diccionario = {'nome': 'Fulano', 'idade': 30, 'cidade': 'São Paulo'}",
                                "// iterar nas chaves",
                                "PARA chave NO diccionario:",
                                "    escrever(\"Chave: \", chave, \"| Valor:\", diccionario[chave])",
                                "    # \"chave: nome | valor: Fulano",
                                "    # \"chave: idade | valor: 30",
                                "    # \"chave: ciddade | valor: São Paulo",
                                "FIM PARA",
                                "// iterar nos valores",
                                "PARA valor NO diccionario.valores():",
                                "    escrever(Valor:\", valor)",
                                "    # \"Valor: Fulano",
                                "    # \"Valor: 30",
                                "    # \"Valor: São Paulo",
                                "FIM PARA",
                                "// iterar nos elementos (itens)",
                                "PARA elemento NO diccionario.itens():",
                                "    escrever(\"Chave: \", element[0], \"| Valor:\", elemento[1])",
                                "    # \"chave: nome | valor: Fulano",
                                "    # \"chave: idade | valor: 30",
                                "    # \"chave: ciddade | valor: São Paulo",
                                "FIM PARA"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Exercícios Resolvidos",
            "sections": [
                {
                    "title": null,
                    "content": []
                },
                {
                    "title": "1. Folha de pagamento",
                    "content": [
                        {
                            "p": "Uma empresa possui uma lista de funcionários com seus respectivos salários. A empresa precisa calcular a folha de pagamento total e a média salarial dos funcionários. Os dados são fornecidos na lista a seguir:"
                        },
                        {
                            "mockupCodes": [
                                "funcionarios = [",
                                "    [\"Fulano\", 1000],",
                                "    [\"Beltrana\", 2000],",
                                "    [\"João Ninguém\", 3000]",
                                "]"
                            ]
                        },
                        {
                            "subsection": "Solução"
                        },
                        {
                            "mockupCodes": [
                                "PROGRAMA folha_pagamento",
                                "funcionarios = [",
                                "    [\"Fulano\", 1000],",
                                "    [\"Beltrana\", 2000],",
                                "    [\"João Ninguém\", 3000]",
                                "]",
                                "INICIO",
                                "    ",
                                "    folha_pagamento_total = 0",
                                "    media_salarial = 0",
                                "    ",
                                "    PARA funcionario NO funcionarios:",
                                "        folha_pagamento_total = folha_pagamento_total + funcionario[1]",
                                "        media_salarial = media_salarial + funcionario[1]",
                                "    FIM PARA",
                                "    ",
                                "    media_salarial = media_salarial/ len(funcionarios)",
                                "    ",
                                "    escrever(\"Folha de pagamento total:\", folha_pagamento_total)",
                                "    escrever(\"Média salarial:\", media_salarial)",
                                "FIM"
                            ]
                        }
                    ]
                },
                {
                    "title": "2.Lista de produtos",
                    "content": [
                        {
                            "p": "Um supermercado possui uma lista de produtos com seus respectivos preços. O supermercado precisa calcular o valor total das compras de um cliente com base em uma lista de produtos que ele comprou. Crie um programa que realiza essa tarefa, de acordo com os dados a seguir:"
                        },
                        {
                            "mockupCodes": [
                                "// Dicionário - produto: preço unitário",
                                "produtos = {",
                                "    \"maçã\": 1.50,",
                                "    \"banana\": 2.00,",
                                "    \"laranja\": 3.00,",
                                "    \"arroz\": 6.00,",
                                "    \"feijão\": 9.00,",
                                "    \"macarrão\": 4.00,",
                                "    \"carne\": 30.00,",
                                "}",
                                "// Dicionário - produto: quantidade comprada",
                                "compras = {",
                                "    \"banana\": 5,",
                                "    \"arroz\": 2,",
                                "    \"feijão\": 1,",
                                "    \"carne\": 2",
                                "}"
                            ]
                        },
                        {
                            "subsection": "Solução"
                        },
                        {
                            "mockupCodes": [
                                "PROGRAMA compras",
                                "produtos = {",
                                "    \"maçã\": 1.50,",
                                "    \"banana\": 2.00,",
                                "    \"laranja\": 3.00,",
                                "    \"arroz\": 6.00,",
                                "    \"feijão\": 9.00,",
                                "    \"macarrão\": 4.00,",
                                "    \"carne\": 30.00,",
                                "}",
                                "compras = {",
                                "    \"banana\": 5,",
                                "    \"arroz\": 2,",
                                "    \"feijão\": 1,",
                                "    \"carne\": 2",
                                "}",
                                "INICIO",
                                "    valor_total = 0",
                                "    PARA produto NO compras:",
                                "        valor_total = valor_total + produtos[produto]*compras[produto]",
                                "    FIM PARA",
                                "    escrever(\"Valor total das compras:\", valor_total)",
                                "FIM"
                            ]
                        }
                    ]
                },
                {
                    "title": "3. Biblioteca",
                    "content": [
                        {
                            "p": "Uma biblioteca possui uma lista de livros com seus respectivos autores. A biblioteca precisa gerar um dicionário com nomes de autores como chaves, e quantidade de livos como valores. Realize essa tarefa no dado a seguir:"
                        },
                        {
                            "mockupCodes": [
                                "livros = {",
                                "    \"Fulano\": [\"Livro 1\", \"Livro 2\", \"Livro 3\", \"Livro 4\"],",
                                "    \"Beltrana\": [\"Livro 5\", \"Livro 6\"],",
                                "    \"João Ninguém\": [\"Livro 7\", \"Livro 8\", \"Livro 9\", \"Livro 10\", \"Livro 11\"]",
                                "}"
                            ]
                        },
                        {
                            "p": "#### Solução"
                        },
                        {
                            "mockupCodes": [
                                "PROGRAMA biblioteca",
                                "livros = {",
                                "    \"Fulano\": [\"Livro 1\", \"Livro 2\", \"Livro 3\", \"Livro 4\"],",
                                "    \"Beltrana\": [\"Livro 5\", \"Livro 6\"],",
                                "    \"João Ninguém\": [\"Livro 7\", \"Livro 8\", \"Livro 9\", \"Livro 10\", \"Livro 11\"]",
                                "}",
                                "INICIO",
                                "quantidades = {}",
                                "PARA autor NO livros:",
                                "    soma = tamanho(livros[autor])",
                                "    quantidade.adicionar('autor', soma)",
                                "FIM PARA",
                                "escrever(quantidades)",
                                "//Resultado:",
                                "/*",
                                "    {",
                                "        \"Fulano\": 4",
                                "        \"Beltrana\": 2",
                                "        \"João Ninguém\": 5",
                                "    }",
                                "*/",
                                "FIM"
                            ]
                        }
                    ]
                },
                {
                    "title": "4. Filmes",
                    "content": [
                        {
                            "p": "Um sistema de recomendação de filmes precisa gerar uma lista de filmes recomendados para um usuário com base em seus filmes favoritos."
                        },
                        {
                            "mockupCodes": [
                                "filmes_recomendados = {",
                                "    \"O Poderoso Chefão\": [\"O Poderoso Chefão II\", \"O Poderoso Chefão III\", \"Scarface\"],",
                                "    \"Star Wars\": [\"Star Wars: O Império Contra-Ataca\", \"Star Wars: O Retorno de Jedi\", \"Star Wars: O Despertar da Força\"],",
                                "    \"Indiana Jones\": [\"Indiana Jones e Os Caçadores da Arca Perdida\", \"Indiana Jones e o Templo da Perdição\", \"Indiana Jones e a Última Cruzada\"],",
                                "    \"Jurassic Park\": [\"O Mundo Perdido: Jurassic Park\", \"Jurassic Park III\", \"Jurassic World\"],",
                                "    \"Matrix\": [\"Matrix Reloaded\", \"Matrix Revolutions\", \"Inception\"],",
                                "    \"O Exterminador do Futuro\": [\"O Exterminador do Futuro 2: O Julgamento Final\", \"O Exterminador do Futuro 3: A Rebelião das Máquinas\", \"O Exterminador do Futuro: Gênesis\"],",
                                "    \"O Senhor dos Anéis\": [\"O Hobbit\", \"As Crônicas de Nárnia\", \"Game of Thrones\"],",
                                "    \"Piratas do Caribe\": [\"Piratas do Caribe: A Maldição do Pérola Negra\", \"Piratas do Caribe: O Baú da Morte\", \"Piratas do Caribe: No Fim do Mundo\"],",
                                "    \"Toy Story\": [\"Toy Story 2\", \"Toy Story 3\", \"Toy Story 4\"]",
                                "}",
                                "filmes_favoritos = [\"O Poderoso Chefão\", \"O Senhor dos Anéis\", \"Matrix\"]"
                            ]
                        },
                        {
                            "subsection": "Solução"
                        },
                        {
                            "p": "Crie um código que realize essa tarefa"
                        },
                        {
                            "mockupCodes": [
                                "PROGRAMA filmes",
                                "// variáveis 'filmes_recomendados' e 'filmes_recomendados' aqui",
                                "INICIO",
                                "    recomendacoes = []",
                                "    PARA filme_favorito NO filmes_favoritos:",
                                "        recomendacoes = recomendacoes + filmes_recomendados[filme_favorito]",
                                "    FIM PARA",
                                "    ",
                                "escrever(\"Filmes recomendados:\", recomendacoes)",
                                "fim"
                            ]
                        }
                    ]
                },
                {
                    "title": "5. Lei da Gravitação Universal",
                    "content": [
                        {
                            "p": "Calcule o módulo da atração gravitacional entre duas partículas, definidas com os dicionários a seguir:"
                        },
                        {
                            "mockupCodes": [
                                "particula_1 = {",
                                "    'massa': 10,",
                                "    'posição': [1, 0]",
                                "}",
                                "particula_2 = {",
                                "    'massa': 300,",
                                "    'posição': [0, 10]",
                                "}"
                            ]
                        },
                        {
                            "subsection": "Solução"
                        },
                        {
                            "mockupCodes": [
                                "PROGRAMA força",
                                "constante_gravitacional = 1",
                                "INICIO",
                                "    produto_massas = particula_1['massa'] * particula_2['massa']",
                                "    ",
                                "    distancia_quadrado = particula_1['posição][0] * particula_2['posição][0] + particula_1['posição][1] * particula_2['posição][1]",
                                "    ",
                                "    F = constante_gravitacional * produto_massas / distancia_quadrado",
                                "    escrever(F)",
                                "FIM"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}